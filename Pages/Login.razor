@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NM

<EditForm Model ="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="userName">User name</label>
        <InputText id="userName" @bind-Value="user.username" class="form-control" />
        <ValidationMessage For="@(() => user.username)" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    <div class=@messagecssClass>
        <span>@message</span>
    </div>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string returnUrl { get; set; } = string.Empty;

    UserLogin user = new UserLogin(); 

    string message = string.Empty;
    string messagecssClass = string.Empty;

    async Task HandleLogin()
    {

         messagecssClass = "text-warning display-5";
         message = "Initial login can take up to 1 minute. Please be patient";        

        var result = await AuthService.Login(user);
        //var result = await AuthService.TestCall(user);

        message = result.Message;
        if (result.Success)
        {
            messagecssClass = "text-success";
            NM.NavigateTo(returnUrl);
        }
        else
            messagecssClass = "text-danger";
    }

    protected override void OnInitialized()
    {
        messagecssClass = "text-warning display-5";
        message = "Initial login can take up to 1 minute. Please be patient";

    }
}