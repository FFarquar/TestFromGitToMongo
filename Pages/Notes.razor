@page "/notes/{bikeId:int}"
@*@attribute [Authorize]*@
@*@using BikeChainUsage.Shared*@
@inject INoteService NS
@inject NavigationManager NM
@*@inject IUploadDownloadServiceClient UDSC*@


<h3>Notes</h3>
<div class="btn-group" role="group" aria-label="Basic example">
    <button type="button" @onclick="() => AddNote()" class="btn btn-secondary fa fa-sticky-note-o"> Add Note</button>
</div>

@if(BikesNotesWithFA == null ||BikesNotesWithFA.Count == 0)
    {
    <span>Loading Notes/No notes found/Not logged in</span>
}
else
{
   <table class="table table-striped table-bordered">
       
        <thead class="thead-dark">

                <tr>
                    <th scope="col" width="120px">Date</th>
                    <th scope="col">Note</th>
                    <th scope="col">Attachments</th>
                    <th scope="col">Edit/Delete</th>

                </tr>

        </thead>
         <tbody>

            

        @foreach (var bikeNote in BikesNotesWithFA)
        {
            <tr>
              <td>@bikeNote.Date.ToString("dd MMM yyyy")</td>
              <td>@bikeNote.Note</td>

              <td><ListAttachments listOfFiles=@bikeNote.Files></ListAttachments></td>
              <td><a href="editdeletebikenote/@bikeNote._id/@bikeId?returnUrl=@NM.ToBaseRelativePath(NM.Uri)"><input type="button" value="Edit"></a></td>


            </tr>
        }
    </tbody>
   </table>



    @code {
    [Parameter]
    public int bikeId { get; set; } = 0;

    //TODO : have to implement File attachments
    private static List<BikeNoteWithFileAttachmentDTO> BikesNotesWithFA = new List<BikeNoteWithFileAttachmentDTO>();

    protected  async Task AddNote()
    {
        var returnURL = @NM.ToBaseRelativePath(NM.Uri);

        NM.NavigateTo($"addbikenote/{bikeId}?returnUrl={returnURL}");
    }


    protected override async Task OnInitializedAsync()
    {
        await NS.GetBikeNotes(bikeId);

        BikesNotesWithFA.Clear();
        foreach (var bp in NS.BikeNotes)
        {
            //TODO : have to deal with file attachmnets
            //var responseFromUDSC = await UDSC.ReturnListOfFileAttachments(bp.Id, "BikeNote");


            //if(responseFromUDSC.Data == null)
            //{
            //    //Create an empty list of files
            //    responseFromUDSC.Data = new List<FileDetail>();
            //}


            //var responseFromUDSC = new ServiceResponse<List<FileDetail>>();
            //responseFromUDSC.Data = new List<FileDetail>();

            BikeNoteWithFileAttachmentDTO BNWFA = new BikeNoteWithFileAttachmentDTO()
            {
                Id = bp.Id,
                Date = bp.Date,
                Note = bp.Note,
                Files = bp.UploadResult,
               _id = bp._id

            };

            Console.WriteLine("BP upload result = " + BNWFA.Files.Count);
            BikesNotesWithFA.Add(BNWFA);
        }

    }

}
}
