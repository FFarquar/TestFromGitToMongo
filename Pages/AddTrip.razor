@page "/addTrip/{bikeId:int}"
@inject ITripServiceClient TSC
@inject IChainServiceClient CSC
@inject NavigationManager NavigationManager
<h3>Add Trip</h3>


<EditForm Model="request" OnValidSubmit="AddNewTrip">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label for="chainId">Chain Letter</label>
        <InputSelect id="chainId" @bind-Value="request.ChainId" class="form-control">
              <option value="">--Select Chain--</option>

                @foreach(var chain in CSC.Chains)
                {

                <option value="@chain.Id"> @chain.ChainLetter</option>


                }
        </InputSelect> 

        <ValidationMessage For="@(() => request.ChainId)" />
    </div>

    <div class="mb-3">
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="request.Date" class="form-control"/>
        <ValidationMessage For="@(() => request.Date)" />

    </div>

    <div class="mb-3">
        <label for="tripDistance">Trip Distance</label>
        <InputNumber id="tripDistance" @bind-Value="request.TripDistance" class="form-control"/>
        <ValidationMessage For="@(() => request.TripDistance)" />
    </div>

    <div class="mb-3">
        <label for="chainRotation">Chain Rotation</label>
        <InputNumber id="chainRotation" @bind-Value="request.ChainRotation" class="form-control"/>
        <ValidationMessage For="@(() => request.ChainRotation)" />
    </div>

     <div class="mb-3">
        <label for="tripDescription">Trip description</label>
        <InputText id="tripDescription" @bind-Value="request.TripDescription" class="form-control"/>
        <ValidationMessage For="@(() => request.TripDescription)" />
    </div>

     <div class="mb-3">
        <label for="tripNotes">Trip notes</label>
        <InputText id="tripNotes" @bind-Value="request.TripNotes" class="form-control"/>
        <ValidationMessage For="@(() => request.TripNotes)" />
    </div>

    <button type="submit" class="btn btn-primary">Add trip</button>

    @message
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = string.Empty;

    [Parameter]
    public int bikeId { get; set; } = 0;

    private static List<Chain> Chains = new List<Chain>();

    Trip request = new Trip();

    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        request.Date = DateTime.Now;

        await CSC.GetChains(bikeId);

    }

    private async Task AddNewTrip()
    {
        var result = await TSC.AddTrip(request);
        message = result.Message;

        if (result.Success)
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
        
    }

}
