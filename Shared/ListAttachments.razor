@*@inject IUploadDownloadServiceClient UDSC*@
@inject IUploadDownloadService UDSC
@inject IJSRuntime JS

@*A component to display files for a specific record. Will also handle the download of said files*@

    @for (var i = 0; i < listOfFiles.Count; i++)
    {
        if (i > 0)
        {
            <p/>
        }
        var fileName = @listOfFiles[i].FileName;
        var serverPath = @listOfFiles[i].ServerPath;
        var StoredFileName = @listOfFiles[i].StoredFileName;
        <button @onclick="@(() => DownloadFile(serverPath, StoredFileName, fileName))">Download @listOfFiles[i].FileName</button>
    }
@code {
    [Parameter]
    //public List<FileDetail> listOfFiles { get; set; } = new List<FileDetail>();
    public List<UploadResult> listOfFiles { get; set; } = new List<UploadResult>();
    private IJSObjectReference? _jsModule;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //This function is a copy of the one made in the TestFileUpload2.razor.js. I moved it to its own script file so other pages can read it too
            _jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./fileScripts.js");
        }
    }

    private async Task DownloadFile(string storedPath, string fileName, string orignalFileName)
    {
        var resultOfService = await UDSC.GeFile(storedPath, fileName);

        if(!resultOfService.Success)
        {
            await JS.InvokeVoidAsync("alert", "File not found");
        }
        else
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", orignalFileName, resultOfService.Data);
        }
    }


}
